name: TurboGo Auto Release

on:
  push:
    branches:
      - main

jobs:
  auto-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_TOKEN }}

      - name: Set up Git
        run: |
          git config user.name "Dziqha"
          git config user.email "abdurrohmanhaadziq@gmail.com"

      - name: Get latest tag
        id: get_tag
        run: |
          TAG=$(git tag | sort -V | tail -n1)
          if [ -z "$TAG" ]; then TAG="v0.0.0"; fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Detect version bump type
        id: version_type
        run: |
          MSG=$(git log -1 --pretty=%B)
          if echo "$MSG" | grep -q "BREAKING CHANGE"; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "$MSG" | grep -q "^feat!:" || echo "$MSG" | grep -q "^feat.*!"; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "$MSG" | grep -q "^feat:"; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif echo "$MSG" | grep -q "^fix:"; then
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version (safe fallback)
        id: bump
        run: |
          OLD=${{ steps.get_tag.outputs.tag }}
          OLD=${OLD#v}

          IFS='.' read -r MAJOR MINOR PATCH <<< "$OLD"
          [ -z "$MAJOR" ] && MAJOR=0
          [ -z "$MINOR" ] && MINOR=0
          [ -z "$PATCH" ] && PATCH=0

          TYPE=${{ steps.version_type.outputs.type }}
          if [ "$TYPE" = "major" ]; then
            MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0
          elif [ "$TYPE" = "minor" ]; then
            MINOR=$((MINOR + 1)); PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create and push new tag
        run: |
          git tag ${{ steps.bump.outputs.new_tag }}
          git push origin ${{ steps.bump.outputs.new_tag }}

      - name: Push major alias tag
        run: |
          MAJOR=$(echo "${{ steps.bump.outputs.new_tag }}" | cut -d '.' -f1)
          git tag -f $MAJOR ${{ steps.bump.outputs.new_tag }}
          git push origin $MAJOR --force

      - name: Generate changelog from .catalog.md
        id: changelog
        run: |
          CURR_TAG=${{ steps.bump.outputs.new_tag }}
          
          echo "${CURR_TAG}" > changelog.txt
          echo "" >> changelog.txt
          
          # Check if .catalog.md exists and add its content
          if [ -f ".catalog.md" ]; then
            echo "📋 Release Notes" >> changelog.txt
            echo "" >> changelog.txt
            cat .catalog.md >> changelog.txt
          else
            echo "⚠️ No .catalog.md file found" >> changelog.txt
            echo "" >> changelog.txt
            echo "🧹 Updates" >> changelog.txt
            echo "- Release created without catalog file" >> changelog.txt
          fi

      - name: Add contributors to changelog
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          # Get previous tag for comparison
          PREV_TAG=$(git tag --sort=-creatordate | sed -n 2p)
          
          # Debug: Show what we're working with
          echo "Previous tag: '$PREV_TAG'"
          echo "Current tag: '${{ steps.bump.outputs.new_tag }}'"
          
          # Get contributors - simplified approach
          if [ -n "$PREV_TAG" ] && [ "$PREV_TAG" != "${{ steps.bump.outputs.new_tag }}" ]; then
            echo "Getting commits from $PREV_TAG to HEAD"
            COMMIT_RANGE="$PREV_TAG..HEAD"
          else
            echo "Getting all commits (no previous tag or same tag)"
            COMMIT_RANGE="HEAD"
          fi
          
          # Get unique authors with simpler format
          git log $COMMIT_RANGE --pretty=format:"%ae|%an" > /tmp/authors.txt
          
          echo "=== Debug: Raw author data ==="
          cat /tmp/authors.txt
          echo "=== End raw data ==="
          
          # Remove duplicates
          sort -u /tmp/authors.txt > /tmp/unique_authors.txt
          
          echo "=== Debug: Unique authors ==="
          cat /tmp/unique_authors.txt
          echo "=== End unique authors ==="
          
          # Count lines to see if we have any authors
          AUTHOR_COUNT=$(cat /tmp/unique_authors.txt | wc -l)
          echo "Found $AUTHOR_COUNT unique authors"
          
          CONTRIBUTORS=""
          CONTRIBUTOR_COUNT=0
          
          # Process each unique author
          while IFS='|' read -r EMAIL NAME; do
            # Skip truly empty lines
            if [ -z "$EMAIL" ] && [ -z "$NAME" ]; then
              echo "Skipping empty line"
              continue
            fi
            
            echo "Processing author: EMAIL='$EMAIL', NAME='$NAME'"
            
            # Try to get GitHub username from email (with timeout)
            if [ -n "$EMAIL" ] && [ "$EMAIL" != "null" ]; then
              echo "Looking up GitHub user for email: $EMAIL"
              USER_JSON=$(timeout 10 curl -s -H "Authorization: token $GH_TOKEN" \
                "https://api.github.com/search/users?q=$(echo $EMAIL | sed 's/@/%40/g')+in:email" || echo '{"items":[]}')
              USER=$(echo "$USER_JSON" | jq -r '.items[0].login // empty' 2>/dev/null || echo "")
              echo "Found GitHub user: '$USER'"
            else
              USER=""
            fi
            
            # Add to contributors list
            if [ -n "$USER" ] && [ "$USER" != "null" ] && [ "$USER" != "empty" ]; then
              CONTRIBUTORS="${CONTRIBUTORS}- [@$USER](https://github.com/$USER)\n"
              echo "Added GitHub user: @$USER"
            elif [ -n "$NAME" ] && [ "$NAME" != "null" ]; then
              CONTRIBUTORS="${CONTRIBUTORS}- $NAME"
              if [ -n "$EMAIL" ] && [ "$EMAIL" != "null" ]; then
                CONTRIBUTORS="${CONTRIBUTORS} ($EMAIL)"
              fi
              CONTRIBUTORS="${CONTRIBUTORS}\n"
              echo "Added by name: $NAME"
            elif [ -n "$EMAIL" ] && [ "$EMAIL" != "null" ]; then
              CONTRIBUTORS="${CONTRIBUTORS}- $EMAIL\n"
              echo "Added by email: $EMAIL"
            fi
            
            CONTRIBUTOR_COUNT=$((CONTRIBUTOR_COUNT + 1))
            
          done < /tmp/unique_authors.txt
          
          echo "=== Final Results ==="
          echo "Contributor count: $CONTRIBUTOR_COUNT"
          echo "Contributors list:"
          echo -e "$CONTRIBUTORS"
          
          # Add contributors section
          echo "" >> changelog.txt
          echo "👥 Contributors" >> changelog.txt
          echo "" >> changelog.txt
          
          if [ $CONTRIBUTOR_COUNT -gt 0 ] && [ -n "$CONTRIBUTORS" ]; then
            echo -e "$CONTRIBUTORS" >> changelog.txt
            echo "" >> changelog.txt
            echo "*Thank you to all $CONTRIBUTOR_COUNT contributor(s) who made this release possible!*" >> changelog.txt
          else
            echo "- No contributors detected in this release" >> changelog.txt
            echo "" >> changelog.txt
            echo "*Debug info: Check Actions logs for details*" >> changelog.txt
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.PERSONAL_TOKEN }}
          tag_name: ${{ steps.bump.outputs.new_tag }}
          name: Release ${{ steps.bump.outputs.new_tag }}
          body_path: changelog.txt

