name: TurboGo Auto Release

on:
  push:
    branches:
      - main

jobs:
  auto-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_TOKEN }}

      - name: Set up Git
        run: |
          git config user.name "Dziqha"
          git config user.email "abdurrohmanhaadziq@gmail.com"

      - name: Get latest tag
        id: get_tag
        run: |
          TAG=$(git tag | sort -V | tail -n1)
          if [ -z "$TAG" ]; then TAG="v0.0.0"; fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Detect version bump type
        id: version_type
        run: |
          MSG=$(git log -1 --pretty=%B)
          if echo "$MSG" | grep -q "BREAKING CHANGE"; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "$MSG" | grep -q "^feat!:" || echo "$MSG" | grep -q "^feat.*!"; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "$MSG" | grep -q "^feat:"; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif echo "$MSG" | grep -q "^fix:"; then
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version (safe fallback)
        id: bump
        run: |
          OLD=${{ steps.get_tag.outputs.tag }}
          OLD=${OLD#v}

          IFS='.' read -r MAJOR MINOR PATCH <<< "$OLD"
          [ -z "$MAJOR" ] && MAJOR=0
          [ -z "$MINOR" ] && MINOR=0
          [ -z "$PATCH" ] && PATCH=0

          TYPE=${{ steps.version_type.outputs.type }}
          if [ "$TYPE" = "major" ]; then
            MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0
          elif [ "$TYPE" = "minor" ]; then
            MINOR=$((MINOR + 1)); PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create and push new tag
        run: |
          git tag ${{ steps.bump.outputs.new_tag }}
          git push origin ${{ steps.bump.outputs.new_tag }}

      - name: Push major alias tag
        run: |
          MAJOR=$(echo "${{ steps.bump.outputs.new_tag }}" | cut -d '.' -f1)
          git tag -f $MAJOR ${{ steps.bump.outputs.new_tag }}
          git push origin $MAJOR --force

      - name: Generate changelog from .changelog.md
        id: changelog
        run: |
          # Check if .changelog.md exists and add its content
          if [ -f ".changelog.md" ]; then
            cat .changelog.md >> changelog.txt
          else
            echo "‚ö†Ô∏è No .changelog.md file found" >> changelog.txt
            echo "" >> changelog.txt
            echo "üßπ Updates" >> changelog.txt
            echo "- Release created without changelog file" >> changelog.txt
          fi
          echo " " >> changelog.txt
          echo " ### ‚úçÔ∏è Commits by: " >> changelog.txt
      
      - name: Generate changelog with PR info
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          PREV_TAG=$(git tag | sort -V | tail -n2 | head -n1)
          CURR_TAG=${{ steps.bump.outputs.new_tag }}

          if [ -n "$PREV_TAG" ]; then
            COMMITS=$(git log $PREV_TAG..HEAD --pretty=format:"%H|%s|%an")
          else
            COMMITS=$(git log --pretty=format:"%H|%s|%an")
          fi

          if [ -z "$COMMITS" ]; then
            echo "- No commits found." >> changelog.txt
          fi

          while IFS="|" read -r HASH MESSAGE AUTHOR; do
            # Skip empty commit messages
            [ -z "$MESSAGE" ] && continue

            PR_INFO=$(curl -s -H "Authorization: token $GH_TOKEN" \
              "https://api.github.com/search/issues?q=$HASH+repo:$REPO")
            PR_NUMBER=$(echo "$PR_INFO" | jq -r '.items[0].number // empty')
            PR_USER=$(echo "$PR_INFO" | jq -r '.items[0].user.login // empty')

            if [ -n "$PR_NUMBER" ] && [ -n "$PR_USER" ]; then
              echo "- $MESSAGE by @$PR_USER in #$PR_NUMBER" >> changelog.txt
            elif [ -n "$AUTHOR" ]; then
              echo "- $MESSAGE by @$AUTHOR in $HASH" >> changelog.txt
            else
              echo "- $MESSAGE in $HASH" >> changelog.txt
            fi
          done <<< "$COMMITS"
      
      - name: Resolve GitHub usernames
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          PREV_TAG=$(git tag --sort=-creatordate | sed -n 2p)
          if [ -n "$PREV_TAG" ]; then
            AUTHORS=$(git log $PREV_TAG..HEAD --format='%ae' | sort -u)
          else
            AUTHORS=$(git log --format='%ae' | sort -u)
          fi

          CONTRIBUTORS=""
          for EMAIL in $AUTHORS; do
            USER=$(curl -s -H "Authorization: token $GH_TOKEN" https://api.github.com/search/users?q=$EMAIL+in:email | jq -r '.items[0].login // empty')
            if [ -n "$USER" ]; then
              CONTRIBUTORS+="[@$USER](https://github.com/$USER)\n"
            fi
          done

          if [ -n "$CONTRIBUTORS" ]; then
            echo "" >> changelog.txt
            echo "üë• Contributors" >> changelog.txt
            echo -e "$CONTRIBUTORS" >> changelog.txt
          fi


      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.PERSONAL_TOKEN }}
          tag_name: ${{ steps.bump.outputs.new_tag }}
          name: TurboGo ${{ steps.bump.outputs.new_tag }}
          body_path: changelog.txt

      - name: Send Telegram Notification
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          VERSION: ${{ steps.bump.outputs.new_tag }}
          TYPE: ${{ steps.version_type.outputs.type }}
        run: |
          TEXT="üìÜ *TurboGo Released ${VERSION}*%0Aüîñ Type: ${TYPE}%0Aüìù Changelog:%0A$(sed ':a;N;$!ba;s/\n/%0A/g' changelog.txt)"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d parse_mode="Markdown" \
            -d text="$TEXT"